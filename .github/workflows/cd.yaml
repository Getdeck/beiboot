name: CD

env:
  PYOXIDIZER_DOWNLOAD_LINUX: https://github.com/indygreg/PyOxidizer/releases/download/pyoxidizer%2F0.23.0/pyoxidizer-0.23.0-x86_64-unknown-linux-musl.tar.gz
  PYOXIDIZER_DOWNLOAD_MAC: https://github.com/indygreg/PyOxidizer/releases/download/pyoxidizer%2F0.23.0/pyoxidizer-0.23.0-macos-universal.tar.gz 



on:
  workflow_run:
    workflows: ["CI"]
    tags:
      - "*"
    types:
      - completed
  workflow_dispatch: {}

jobs:
  create-k8s-certificates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
    #
    # Create a new set of certificates for every new build
    #
  build-operator-container-image:
    needs: [ create-k8s-certificates ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_ROBOT }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      #
      # Beiboot operator
      #
      - name: Operator Image meta
        id: operator_meta
        uses: docker/metadata-action@v3
        with:
          flavor: |
            latest=false
          images: |
            quay.io/getdeck/beiboot
          tags: |
            type=raw,value=latest,enable=${{ !startsWith(github.ref, 'refs/tags/') }}
            type=raw,value={{tag}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: operator/
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.operator_meta.outputs.tags }}
          cache-from: type=registry,ref=${{ steps.operator_meta.outputs.tags }}
  build-linux-executable:
    runs-on: ubuntu-20.04
    needs: [ build-operator-container-image ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Setup PyOxidizer and build
        working-directory: client/
        run: |
          wget ${PYOXIDIZER_DOWNLOAD_LINUX}
          tar -xzf pyoxidizer-0.23.0-x86_64-unknown-linux-musl.tar.gz
          sudo chmod +x ./pyoxidizer-0.23.0-x86_64-unknown-linux-musl/pyoxidizer
          ./pyoxidizer-0.23.0-x86_64-unknown-linux-musl/pyoxidizer build exe --release
          cp `find build/ -name "beibootctl"` ../beibootctl
          strip -s ../beibootctl
          cp README.md ../README.md
          cat pyproject.toml | grep version -m 1 | awk '{ print "APP_VERSION="substr($3, 2, length($3) -2)}' >> $GITHUB_ENV
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: beibootctl-${{ env.APP_VERSION }}-linux-amd64
          path: |
            beibootctl
            LICENSE
            README.md
          retention-days: 5
      - name: Create release zip
        if: ${{ github.event.release && github.event.action == 'published' }}
        run: zip beibootctl-${{ env.APP_VERSION }}-linux-amd64.zip "beibootctl" "LICENSE" "README.md"
      - name: Attach files to release
        uses: softprops/action-gh-release@v1
        if: ${{ github.event.release && github.event.action == 'published' }}
        with:
          files: beibootctl-${{ env.APP_VERSION }}-linux-amd64.zip
  #
  # Add builds for MacOS
  #
  build-mac-executable:
      runs-on: macos-11
      needs: [ build-operator-container-image ]
      steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Setup PyOxidizer and build
        working-directory: client/
        run: |
          wget ${PYOXIDIZER_DOWNLOAD_MAC}
          tar -xzf pyoxidizer-0.23.0-macos-universal.tar.gz
          sudo chmod +x ./pyoxidizer-0.23.0-macos-universal/pyoxidizer
          ./pyoxidizer-0.23.0-macos-universal/pyoxidizer build exe --release
          cp `find build/ -name "beibootctl"` ../beibootctl
          cp README.md ../README.md
          cat pyproject.toml | grep version -m 1 | awk '{ print "APP_VERSION="substr($3, 2, length($3) -2)}' >> $GITHUB_ENV
      - name: Codesign app bundle
        # Extract the secrets we defined earlier as environment variables
        env: 
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |
          # Turn our base64-encoded certificate back to a regular .p12 file
          
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment
          
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          # We finally codesign our app bundle, specifying the Hardened runtime option
          
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime ./beibootctl -v
      - name: "Notarize app bundle"
        # Extract the secrets we defined earlier as environment variables
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI

          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "./beibootctl" "notarization.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious

          echo "Notarize app"
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "./beibootctl"
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: beibootctl-${{ env.APP_VERSION }}-darwin-universal
          path: |
            beibootctl
            LICENSE
            README.md
          retention-days: 5
      - name: Create release zip
        if: ${{ github.event.release && github.event.action == 'published' }}
        run: zip beibootctl-${{ env.APP_VERSION }}-darwin-universal.zip "beibootctl" "LICENSE" "README.md"
      - name: Attach files to release
        uses: softprops/action-gh-release@v1
        if: ${{ github.event.release && github.event.action == 'published' }}
        with:
          files: beibootctl-${{ env.APP_VERSION }}-darwin-universal.zip
