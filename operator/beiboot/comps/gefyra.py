import logging
from typing import Tuple

import yaml  # type: ignore

import kubernetes as k8s

from beiboot.configuration import ClusterConfiguration
from beiboot.resources.utils import handle_create_service
from beiboot.utils import get_external_node_ips

logger = logging.getLogger("beiboot.gefyra")
custom_api = k8s.client.CustomObjectsApi()
core_api = k8s.client.CoreV1Api()

GEFYRA_SERVICE_NAME = "gefyra-nodeport"


def gefyra_service(
    namespace: str, parameters: ClusterConfiguration
) -> k8s.client.V1Service:

    spec = k8s.client.V1ServiceSpec(
        type="NodePort",
        selector=parameters.nodeLabels,
        ports=[
            k8s.client.V1ServicePort(
                name="gefyra",
                target_port=31820,
                port=31820,
                protocol="UDP",
            ),
        ],
    )
    service = k8s.client.V1Service(
        api_version="v1",
        kind="Service",
        metadata=k8s.client.V1ObjectMeta(name=GEFYRA_SERVICE_NAME, namespace=namespace),
        spec=spec,
    )
    return service


async def create_gefyra_components(
    namespace: str,
    parameters: ClusterConfiguration,
) -> Tuple[int, str]:
    svc = handle_create_service(
        logger,
        gefyra_service(namespace, parameters),
        namespace,
    )
    gefyra_nodeport = svc.spec.ports[0].node_port
    gefyra_endpoint = parameters.gefyra.get("endpoint")
    if bool(gefyra_endpoint) is False:
        _ips = get_external_node_ips(core_api)
        gefyra_endpoint = _ips[0] if _ips else None
    return int(gefyra_nodeport), str(gefyra_endpoint)


async def handle_gefyra_components(
    kubeconfig: str,
    namespace: str,
    parameters: ClusterConfiguration,
) -> Tuple[str, str, str]:
    try:
        gefyra_service = core_api.read_namespaced_service(
            name=GEFYRA_SERVICE_NAME, namespace=namespace
        )
        gefyra_nodeport = (
            gefyra_service.spec.ports[0].node_port
            if len(gefyra_service.spec.ports) > 0
            else None
        )
        gefyra_endpoint = parameters.gefyra.get("endpoint")
        if bool(gefyra_endpoint) is False:
            _ips = get_external_node_ips(core_api)
            gefyra_endpoint = _ips[0] if _ips else None
    except k8s.client.ApiException as e:
        if e.status == 404:
            gefyra_nodeport, gefyra_endpoint = await create_gefyra_components(
                namespace, parameters
            )
        else:
            raise e

    # return a dict with the source generated by the K8s provider
    # add gefyra connection params to kubeconfig
    if gefyra_endpoint and gefyra_nodeport:
        data = yaml.safe_load(kubeconfig)
        for ctx in data["contexts"]:
            if ctx["name"] == "default":
                ctx["gefyra"] = f"{gefyra_endpoint}:{gefyra_nodeport}"
        kubeconfig = yaml.dump(data)
    return str(gefyra_nodeport), str(gefyra_endpoint), kubeconfig
